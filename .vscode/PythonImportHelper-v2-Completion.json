[
    {
        "label": "*",
        "importPath": "ILS",
        "description": "ILS",
        "isExtraImport": true,
        "detail": "ILS",
        "documentation": {}
    },
    {
        "label": "construct_grasp",
        "importPath": "GRASP",
        "description": "GRASP",
        "isExtraImport": true,
        "detail": "GRASP",
        "documentation": {}
    },
    {
        "label": "objective_function",
        "importPath": "GRASP",
        "description": "GRASP",
        "isExtraImport": true,
        "detail": "GRASP",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "vizualization",
        "description": "vizualization",
        "isExtraImport": true,
        "detail": "vizualization",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "timeit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "timeit",
        "description": "timeit",
        "detail": "timeit",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "PCA",
        "importPath": "sklearn.decomposition",
        "description": "sklearn.decomposition",
        "isExtraImport": true,
        "detail": "sklearn.decomposition",
        "documentation": {}
    },
    {
        "label": "benchmark_neighbourhood_instance",
        "kind": 2,
        "importPath": "benchmark",
        "description": "benchmark",
        "peekOfCode": "def benchmark_neighbourhood_instance(matrix, search_function, debug=False):\n    \"\"\"\n    Runs the ILS algorithm and benchmarks its performance.\n    Parameters:\n    - matrix: 2D numpy array representing the cost matrix (n x n).\n    - search_function: The search function to use.\n    - debug: Boolean flag to enable/disable debugging statements.\n    \"\"\"\n    _, best_value_NI = search_function(matrix, visit_NI)\n    _, best_value_NS = search_function(matrix, visit_NS)",
        "detail": "benchmark",
        "documentation": {}
    },
    {
        "label": "print_neighbourhood_benchmark_statistics",
        "kind": 2,
        "importPath": "benchmark",
        "description": "benchmark",
        "peekOfCode": "def print_neighbourhood_benchmark_statistics(results):\n    improvements = []\n    for key, (n_i, n_s) in results.items():\n        improvement = (n_i - n_s) / n_s  # Relative improvement\n        improvements.append(improvement)\n    # Compute mean and standard deviation\n    mean_improvement = np.mean(improvements)\n    std_improvement = np.std(improvements)\n    print(\n        f\"Overall mean relative improvement of N_I over N_S: {mean_improvement*100:.2f}% Â± {std_improvement*100:.2f}%\"",
        "detail": "benchmark",
        "documentation": {}
    },
    {
        "label": "benchmark_starting_solution_instance",
        "kind": 2,
        "importPath": "benchmark",
        "description": "benchmark",
        "peekOfCode": "def benchmark_starting_solution_instance(\n    matrix, search_function, nb_repetitions=10, debug=False\n):\n    \"\"\"\n    Runs the ILS algorithm with different starting solutions and benchmarks its performance.\n    Starting solutions are generated using:\n        - a random permutation\n        - Becker's constructive heuristic\n    \"\"\"\n    n = matrix.shape[0]",
        "detail": "benchmark",
        "documentation": {}
    },
    {
        "label": "print_starting_solution_benchmark_statistics",
        "kind": 2,
        "importPath": "benchmark",
        "description": "benchmark",
        "peekOfCode": "def print_starting_solution_benchmark_statistics(results):\n    \"\"\"\n    Prints the relative improvements of the different starting solutions.\n    \"\"\"\n    improvements_becker_random, improvements_random_monotone = [], []\n    for key, (monotone, random, becker) in results.items():\n        improvement_becker_random = (becker - random) / random\n        improvements_becker_random.append(improvement_becker_random)\n        improvement_random_monotone = (random - monotone) / monotone\n        improvements_random_monotone.append(improvement_random_monotone)",
        "detail": "benchmark",
        "documentation": {}
    },
    {
        "label": "benchmark_visited_points",
        "kind": 2,
        "importPath": "benchmark",
        "description": "benchmark",
        "peekOfCode": "def benchmark_visited_points(matrix, search_function, debug=False):\n    \"\"\"\n    Benchmarks the number of visited points using the Iterated Local Search (ILS) algorithm.\n    Args:\n        matrix (list of list of int): The input matrix representing the problem instance.\n        search_function (callable): The search function to use.\n        debug (bool, optional): If True, enables debug mode for additional output. Defaults to False.\n    Returns:\n        list: A list of visited points during the ILS algorithm execution.\n    \"\"\"",
        "detail": "benchmark",
        "documentation": {}
    },
    {
        "label": "plot_permutations_with_pca_benchmark",
        "kind": 2,
        "importPath": "benchmark",
        "description": "benchmark",
        "peekOfCode": "def plot_permutations_with_pca_benchmark(results, folder=\"default\"):\n    \"\"\"\n    Plots the visited points during the ILS algorithm execution.\n    Args:\n        results (dict): A dict of filename and visited points.\n    \"\"\"\n    for key, visited_points in results.items():\n        matrix = read_square_matrix_from_file(key, False)[\"matrix\"]\n        obj_func = lambda x: objective_function(matrix, x)\n        filename = key.split(\"/\")[-1].split(\".\")[0]",
        "detail": "benchmark",
        "documentation": {}
    },
    {
        "label": "benchmark_score_evolution",
        "kind": 2,
        "importPath": "benchmark",
        "description": "benchmark",
        "peekOfCode": "def benchmark_score_evolution(matrix, search_function, debug=False):\n    \"\"\"\n    Benchmarks the score evolution using the Iterated Local Search (ILS) algorithm.\n    Args:\n        matrix (list of list of int): The input matrix representing the problem instance.\n        search_function (callable): The search function to use.\n        debug (bool, optional): If True, enables debug mode for additional output. Defaults to False.\n    Returns:\n        list: A list of visited points during the ILS algorithm execution.\n    \"\"\"",
        "detail": "benchmark",
        "documentation": {}
    },
    {
        "label": "benchmark_neighbourhood_diversity",
        "kind": 2,
        "importPath": "benchmark",
        "description": "benchmark",
        "peekOfCode": "def benchmark_neighbourhood_diversity(matrix, search_function, debug=False):\n    \"\"\"\n    Runs the ILS algorithm and computes the pairwise kendall tau distance between the permutations.\n    Parameters:\n        matrix (np.array): The cost matrix.\n        search_function (callable): The search function to use.\n        debug (bool): Flag to enable/disable debugging. Default is False.\n    Returns:\n        cummulative distribution of the pairwise kendall tau distance.\n    \"\"\"",
        "detail": "benchmark",
        "documentation": {}
    },
    {
        "label": "benchmark_execution_time",
        "kind": 2,
        "importPath": "benchmark",
        "description": "benchmark",
        "peekOfCode": "def benchmark_execution_time(matrix, search_functions, debug=False):\n    \"\"\"\n    Runs the ILS algorithm and benchmarks its performance in terms of computational time.\n    Arguments:\n        matrix (np.array): The cost matrix.\n        max_iter (int): The maximum number of iterations for the ILS algorithm.\n        debug (bool): Flag to enable/disable debugging. Default is False.\n    \"\"\"\n    start_times, end_times = [], []\n    for search_function in search_functions:",
        "detail": "benchmark",
        "documentation": {}
    },
    {
        "label": "print_execution_time_statistics",
        "kind": 2,
        "importPath": "benchmark",
        "description": "benchmark",
        "peekOfCode": "def print_execution_time_statistics(results):\n    \"\"\"\n    Prints the execution time statistics.\n    \"\"\"\n    size_time_ni, size_time_ns = {}, {}\n    for key, values in results.items():\n        size_time_ni.setdefault(values[0], []).append(values[1])\n        size_time_ns.setdefault(values[0], []).append(values[2])\n    sizes = sorted(size_time_ni.keys())\n    ni_means = [np.mean(size_time_ni[size]) for size in sizes]",
        "detail": "benchmark",
        "documentation": {}
    },
    {
        "label": "read_square_matrix_from_file",
        "kind": 2,
        "importPath": "benchmark",
        "description": "benchmark",
        "peekOfCode": "def read_square_matrix_from_file(file_path, debug=False):\n    \"\"\"\n    Reads a square matrix from a file where the size is specified at the beginning.\n    Parameters:\n        file_path (str): Path to the file containing the matrix.\n        debug (bool): Boolean flag to enable/disable debugging statements.\n    Returns:\n        dict: A dictionary containing:\n            - 'header': The header line of the file.\n            - 'size': The size of the square matrix (int).",
        "detail": "benchmark",
        "documentation": {}
    },
    {
        "label": "convert_to_native",
        "kind": 2,
        "importPath": "benchmark",
        "description": "benchmark",
        "peekOfCode": "def convert_to_native(obj):\n    if isinstance(obj, np.integer):\n        return int(obj)\n    elif isinstance(obj, np.floating):\n        return float(obj)\n    elif isinstance(obj, np.ndarray):\n        return obj.tolist()\n    else:\n        return obj\ndef process_file(file_name, search_function, benchmark_instance, debug):",
        "detail": "benchmark",
        "documentation": {}
    },
    {
        "label": "process_file",
        "kind": 2,
        "importPath": "benchmark",
        "description": "benchmark",
        "peekOfCode": "def process_file(file_name, search_function, benchmark_instance, debug):\n    matrix = read_square_matrix_from_file(file_name, debug)[\"matrix\"]\n    results = benchmark_instance(matrix, search_function, debug)\n    return file_name, results\ndef benchmark(\n    filename,\n    search_function,\n    benchmark_instance,\n    print_statistics,\n    debug=False,",
        "detail": "benchmark",
        "documentation": {}
    },
    {
        "label": "benchmark",
        "kind": 2,
        "importPath": "benchmark",
        "description": "benchmark",
        "peekOfCode": "def benchmark(\n    filename,\n    search_function,\n    benchmark_instance,\n    print_statistics,\n    debug=False,\n):\n    \"\"\"\n    Reads all the files in the current directory that have the .mat extension and runs the benchmark_instance function on them.\n    Parameters:",
        "detail": "benchmark",
        "documentation": {}
    },
    {
        "label": "contribution",
        "kind": 2,
        "importPath": "GRASP",
        "description": "GRASP",
        "peekOfCode": "def contribution(candidate, matrix):\n    \"\"\"\n    Calculates the contribution of a candidate based on the given matrix.\n    Parameters:\n    - candidate: Index of the candidate.\n    - matrix: 2D array representing the cost matrix.\n    Returns:\n    - sum: Total contribution of the candidate.\n    \"\"\"\n    total = 0",
        "detail": "GRASP",
        "documentation": {}
    },
    {
        "label": "objective_function",
        "kind": 2,
        "importPath": "GRASP",
        "description": "GRASP",
        "peekOfCode": "def objective_function(matrix, permutation):\n    \"\"\"\n    Computes the objective function value for a given permutation.\n    Parameters:\n    - matrix: 2D numpy array representing the cost matrix (n x n).\n    - permutation: List of indices representing the current order.\n    Returns:\n    - objective_value: The computed objective value for the permutation.\n    \"\"\"\n    objective_value = 0",
        "detail": "GRASP",
        "documentation": {}
    },
    {
        "label": "calculate_candidates",
        "kind": 2,
        "importPath": "GRASP",
        "description": "GRASP",
        "peekOfCode": "def calculate_candidates(current_sol, matrix):\n    \"\"\"\n    Calculates the list of candidates not in the current solution.\n    Parameters:\n    - current_sol: List of indices in the current solution.\n    - matrix: 2D array representing the cost matrix.\n    Returns:\n    - candidates: List of tuples (candidate index, contribution).\n    \"\"\"\n    candidates = []",
        "detail": "GRASP",
        "documentation": {}
    },
    {
        "label": "calculate_rcl",
        "kind": 2,
        "importPath": "GRASP",
        "description": "GRASP",
        "peekOfCode": "def calculate_rcl(candidates, alpha):\n    \"\"\"\n    Calculates the Restricted Candidate List (RCL).\n    Parameters:\n    - candidates: List of tuples (candidate index, contribution).\n    - alpha: Parameter to control the size of the RCL.\n    Returns:\n    - rcl: Restricted Candidate List.\n    \"\"\"\n    min_cost = candidates[0][1]",
        "detail": "GRASP",
        "documentation": {}
    },
    {
        "label": "construct_grasp",
        "kind": 2,
        "importPath": "GRASP",
        "description": "GRASP",
        "peekOfCode": "def construct_grasp(matrix, alpha=0.1):\n    \"\"\"\n    Constructs a solution using the GRASP (Greedy Randomized Adaptive Search Procedure) heuristic.\n    Parameters:\n    - matrix: 2D array representing the cost matrix.\n    - alpha: Parameter to control the size of the RCL (default 0.1).\n    Returns:\n    - permutation: Constructed solution as a list of indices.\n    \"\"\"\n    permutation = []",
        "detail": "GRASP",
        "documentation": {}
    },
    {
        "label": "contribution",
        "kind": 2,
        "importPath": "GRASP",
        "description": "GRASP",
        "peekOfCode": "def contribution(candidate, matrix):\n    \"\"\"\n    Calculates the contribution of a candidate based on the given matrix.\n    Parameters:\n    - candidate: Index of the candidate.\n    - matrix: 2D array representing the cost matrix.\n    Returns:\n    - sum: Total contribution of the candidate.\n    \"\"\"\n    total = 0",
        "detail": "GRASP",
        "documentation": {}
    },
    {
        "label": "objective_function",
        "kind": 2,
        "importPath": "GRASP",
        "description": "GRASP",
        "peekOfCode": "def objective_function(matrix, permutation):\n    \"\"\"\n    Computes the objective function value for a given permutation.\n    Parameters:\n    - matrix: 2D numpy array representing the cost matrix (n x n).\n    - permutation: List of indices representing the current order.\n    Returns:\n    - objective_value: The computed objective value for the permutation.\n    \"\"\"\n    objective_value = 0",
        "detail": "GRASP",
        "documentation": {}
    },
    {
        "label": "calculate_candidates",
        "kind": 2,
        "importPath": "GRASP",
        "description": "GRASP",
        "peekOfCode": "def calculate_candidates(current_sol, matrix):\n    \"\"\"\n    Calculates the list of candidates not in the current solution.\n    Parameters:\n    - current_sol: List of indices in the current solution.\n    - matrix: 2D array representing the cost matrix.\n    Returns:\n    - candidates: List of tuples (candidate index, contribution).\n    \"\"\"\n    candidates = []",
        "detail": "GRASP",
        "documentation": {}
    },
    {
        "label": "calculate_rcl",
        "kind": 2,
        "importPath": "GRASP",
        "description": "GRASP",
        "peekOfCode": "def calculate_rcl(candidates, alpha):\n    \"\"\"\n    Calculates the Restricted Candidate List (RCL).\n    Parameters:\n    - candidates: List of tuples (candidate index, contribution).\n    - alpha: Parameter to control the size of the RCL.\n    Returns:\n    - rcl: Restricted Candidate List.\n    \"\"\"\n    min_cost = candidates[0][1]",
        "detail": "GRASP",
        "documentation": {}
    },
    {
        "label": "construct_grasp",
        "kind": 2,
        "importPath": "GRASP",
        "description": "GRASP",
        "peekOfCode": "def construct_grasp(matrix, alpha=0.1):\n    \"\"\"\n    Constructs a solution using the GRASP (Greedy Randomized Adaptive Search Procedure) heuristic.\n    Parameters:\n    - matrix: 2D array representing the cost matrix.\n    - alpha: Parameter to control the size of the RCL (default 0.1).\n    Returns:\n    - permutation: Constructed solution as a list of indices.\n    \"\"\"\n    permutation = []",
        "detail": "GRASP",
        "documentation": {}
    },
    {
        "label": "becker_constructive_algorithm",
        "kind": 2,
        "importPath": "ILS",
        "description": "ILS",
        "peekOfCode": "def becker_constructive_algorithm(matrix):\n    \"\"\"\n    Implements Becker's constructive heuristic for the Linear Ordering Problem.\n    Parameters:\n    - matrix: 2D numpy array representing the cost matrix (n x n).\n    Returns:\n    - permutation: List of indices representing the order.\n    \"\"\"\n    n = matrix.shape[0]  # Number of rows/columns in the matrix\n    indices = list(range(n))  # List of all indices",
        "detail": "ILS",
        "documentation": {}
    },
    {
        "label": "interchange",
        "kind": 2,
        "importPath": "ILS",
        "description": "ILS",
        "peekOfCode": "def interchange(permutation, i, j):\n    \"\"\"\n    Performs an interchange operation on a permutation.\n    Parameters:\n    - permutation: List of indices representing the current order.\n    - i: Index of the first element to swap.\n    - j: Index of the second element to swap.\n    Returns:\n    - new_permutation: A new list with the elements at i and j swapped.\n    \"\"\"",
        "detail": "ILS",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "ILS",
        "description": "ILS",
        "peekOfCode": "def insert(permutation, i, j):\n    \"\"\"\n    Performs an insert operation on a permutation.\n    Parameters:\n    - permutation: List of indices representing the current order.\n    - i: Index of the element to move.\n    - j: Index where the element should be inserted.\n    Returns:\n    - new_permutation: A new list with the element at index i inserted at index j.\n    \"\"\"",
        "detail": "ILS",
        "documentation": {}
    },
    {
        "label": "delta_insert",
        "kind": 2,
        "importPath": "ILS",
        "description": "ILS",
        "peekOfCode": "def delta_insert(matrix, permutation, i, j):\n    \"\"\"\n    Computes the delta function for an insert operation on the permutation.\n    Parameters:\n    - matrix: 2D numpy array representing the cost matrix (n x n).\n    - permutation: Current permutation of indices.\n    - i: Index of the element to move.\n    - j: Index where the element is to be inserted.\n    Returns:\n    - delta: The change in the objective function value due to the insert operation.",
        "detail": "ILS",
        "documentation": {}
    },
    {
        "label": "delta_swap",
        "kind": 2,
        "importPath": "ILS",
        "description": "ILS",
        "peekOfCode": "def delta_swap(matrix, permutation, i, j):\n    \"\"\"\n    Computes the delta function for a swap operation on the permutation.\n    Parameters:\n    - matrix: 2D numpy array representing the cost matrix (n x n).\n    - permutation: Current permutation of indices.\n    - i: Index of the first element to swap.\n    - j: Index of the second element to swap.\n    Returns:\n    - delta: The change in the objective function value due to the swap operation.",
        "detail": "ILS",
        "documentation": {}
    },
    {
        "label": "visit_CK",
        "kind": 2,
        "importPath": "ILS",
        "description": "ILS",
        "peekOfCode": "def visit_CK(matrix, permutation, objective_function):\n    \"\"\"\n    Recursively sorts a permutation based on the defined criteria.\n    Parameters:\n    - matrix: 2D numpy array representing the cost matrix (n x n).\n    - permutation: List of indices representing the current order.\n    Returns:\n    - sorted_permutation: A new permutation that is sorted.\n    \"\"\"\n    if len(permutation) == 1:",
        "detail": "ILS",
        "documentation": {}
    },
    {
        "label": "visit_NI",
        "kind": 2,
        "importPath": "ILS",
        "description": "ILS",
        "peekOfCode": "def visit_NI(matrix, permutation, objective_function):\n    \"\"\"\n    Implements the visit_NI visit neighbourhood function for the insertion neighborhood.\n    Parameters:\n    - matrix: 2D numpy array representing the cost matrix (n x n).\n    - permutation: List of indices representing the current order.\n    - objective_function: A function that computes the objective value for a given permutation.\n    Returns:\n    - new_permutation: A modified permutation if an improvement is found, otherwise the original permutation.\n    \"\"\"",
        "detail": "ILS",
        "documentation": {}
    },
    {
        "label": "visit_NS",
        "kind": 2,
        "importPath": "ILS",
        "description": "ILS",
        "peekOfCode": "def visit_NS(matrix, permutation, objective_function):\n    \"\"\"\n    Implements the visit_NS visit neighbourhood function for the swap neighborhood.\n    Parameters:\n    - matrix: 2D numpy array representing the cost matrix (n x n).\n    - permutation: List of indices representing the current order.\n    - objective_function: A function that computes the objective value for a given permutation.\n    Returns:\n    - new_permutation: A modified permutation if an improvement is found, otherwise the original permutation.\n    \"\"\"",
        "detail": "ILS",
        "documentation": {}
    },
    {
        "label": "objective_function",
        "kind": 2,
        "importPath": "ILS",
        "description": "ILS",
        "peekOfCode": "def objective_function(matrix, permutation):\n    \"\"\"\n    Computes the objective function value for a given permutation.\n    Parameters:\n    - matrix: 2D numpy array representing the cost matrix (n x n).\n    - permutation: List of indices representing the current order.\n    Returns:\n    - objective_value: The computed objective value for the permutation.\n    \"\"\"\n    objective_value = 0",
        "detail": "ILS",
        "documentation": {}
    },
    {
        "label": "LS",
        "kind": 2,
        "importPath": "ILS",
        "description": "ILS",
        "peekOfCode": "def LS(\n    matrix,\n    objective_function,\n    visit_N,\n    start_permutation,\n    max_iter=40,\n    log_visits=False,\n    debug=False,\n):\n    \"\"\"",
        "detail": "ILS",
        "documentation": {}
    },
    {
        "label": "perturb_random",
        "kind": 2,
        "importPath": "ILS",
        "description": "ILS",
        "peekOfCode": "def perturb_random(permutation, percentage=1):\n    \"\"\"\n    Perturbs a permutation by removing half of the permutation and replacing it with a random permutation.\n    Parameters:\n    - permutation: List of indices representing the current order.\n    - percentage: Percentage of the permutation to shuffle.\n    - k: Number of random swap operations to perform.\n    Returns:\n    - perturbed_permutation: A new permutation that has been perturbed.\n    \"\"\"",
        "detail": "ILS",
        "documentation": {}
    },
    {
        "label": "ILS",
        "kind": 2,
        "importPath": "ILS",
        "description": "ILS",
        "peekOfCode": "def ILS(\n    matrix,\n    objective_function,\n    constructive_heuristic,\n    perturbation,\n    visit_N,\n    max_iter=10,\n    max_local_iter=40,\n    log_visits=False,\n    debug=False,",
        "detail": "ILS",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "TABU",
        "description": "TABU",
        "peekOfCode": "def insert(pi, i, j):\n    \"\"\"\n    Inserts the element at position i into position j in the permutation pi.\n    Parameters:\n    - pi: List representing the permutation.\n    - i: Index of the element to move.\n    - j: Target index for the element.\n    Returns:\n    - new_pi: Modified permutation with the element moved.\n    \"\"\"",
        "detail": "TABU",
        "documentation": {}
    },
    {
        "label": "delta",
        "kind": 2,
        "importPath": "TABU",
        "description": "TABU",
        "peekOfCode": "def delta(matrix, pi, i, j):\n    \"\"\"\n    Computes the change in objective value for moving element i to position j.\n    Parameters:\n    - matrix: 2D list representing the cost matrix.\n    - pi: List representing the current permutation.\n    - i: Index of the element to move.\n    - j: Target index for the element.\n    Returns:\n    - delta: The calculated change in objective value.",
        "detail": "TABU",
        "documentation": {}
    },
    {
        "label": "get_obj_value",
        "kind": 2,
        "importPath": "TABU",
        "description": "TABU",
        "peekOfCode": "def get_obj_value(matrix, pi):\n    \"\"\"\n    Computes the objective value of a given permutation.\n    Parameters:\n    - matrix: 2D list representing the cost matrix.\n    - pi: List representing the permutation.\n    Returns:\n    - obj_value: The calculated objective value.\n    \"\"\"\n    return sum(",
        "detail": "TABU",
        "documentation": {}
    },
    {
        "label": "granularity_fine",
        "kind": 2,
        "importPath": "TABU",
        "description": "TABU",
        "peekOfCode": "def granularity_fine(i, j):\n    \"\"\"\n    Fine-grained granularity representation for tabu list.\n    Parameters:\n    - i: Index of the element being moved.\n    - j: Target index for the element.\n    Returns:\n    - Tuple (i, j): Fine granularity representation.\n    \"\"\"\n    return (i, j)",
        "detail": "TABU",
        "documentation": {}
    },
    {
        "label": "granularity_coarse",
        "kind": 2,
        "importPath": "TABU",
        "description": "TABU",
        "peekOfCode": "def granularity_coarse(i, j):\n    \"\"\"\n    Coarse-grained granularity representation for tabu list.\n    Parameters:\n    - i: Index of the element being moved.\n    - j: Target index for the element.\n    Returns:\n    - i: Coarse granularity representation.\n    \"\"\"\n    return i",
        "detail": "TABU",
        "documentation": {}
    },
    {
        "label": "tabu_iteration",
        "kind": 2,
        "importPath": "TABU",
        "description": "TABU",
        "peekOfCode": "def tabu_iteration(matrix, pi, tabu_list, granularity_func, tenure):\n    \"\"\"\n    Performs one iteration of the tabu search to find the best neighbor.\n    Parameters:\n    - matrix: 2D list representing the cost matrix.\n    - pi: List representing the current permutation.\n    - tabu_list: List of tabu moves.\n    - granularity_func: Function to determine tabu granularity.\n    - tenure: Maximum size of the tabu list.\n    Returns:",
        "detail": "TABU",
        "documentation": {}
    },
    {
        "label": "tabu_search",
        "kind": 2,
        "importPath": "TABU",
        "description": "TABU",
        "peekOfCode": "def tabu_search(matrix, pi_init, tenure, n, granularity_func):\n    \"\"\"\n    Performs tabu search to optimize the objective function.\n    Parameters:\n    - matrix: 2D list representing the cost matrix.\n    - pi_init: Initial permutation.\n    - tenure: Maximum size of the tabu list.\n    - n: Number of iterations to perform.\n    - granularity_func: Function to determine tabu granularity.\n    Returns:",
        "detail": "TABU",
        "documentation": {}
    },
    {
        "label": "plot_permutations_with_pca",
        "kind": 2,
        "importPath": "vizualization",
        "description": "vizualization",
        "peekOfCode": "def plot_permutations_with_pca(\n    permutations_to_plot,\n    objective_function,\n    filename=\"default\",\n    folder=\"default\",\n):\n    \"\"\"\n    Function to plot permutations in 2D space using PCA.\n    The function:\n      - Generates 100 random permutations (blue, alpha=0.5).",
        "detail": "vizualization",
        "documentation": {}
    },
    {
        "label": "plot_score_evolution",
        "kind": 2,
        "importPath": "vizualization",
        "description": "vizualization",
        "peekOfCode": "def plot_score_evolution(results):\n    \"\"\"\n    Function to plot the evolution of the best score over iterations.\n    Args:\n        results (list of floats): List of best scores over iterations.\n    \"\"\"\n    for key, values in results.items():\n        plt.figure(figsize=(10, 6))\n        plt.plot(values, marker=\"o\", color=\"b\", label=\"Best Score\")\n        plt.xlabel(\"Iteration\")",
        "detail": "vizualization",
        "documentation": {}
    },
    {
        "label": "plot_pairwise_diversity_cdf",
        "kind": 2,
        "importPath": "vizualization",
        "description": "vizualization",
        "peekOfCode": "def plot_pairwise_diversity_cdf(results):\n    \"\"\"\n    Function to plot the CDF of pairwise diversity over iterations.\n    Args:\n        results (dict of list of floats): Dict linking instance name to list of pairwise diversities over iterations.\n    \"\"\"\n    all_values = []\n    for key, values in results.items():\n        all_values.extend(values)\n    plt.figure(figsize=(10, 6))",
        "detail": "vizualization",
        "documentation": {}
    },
    {
        "label": "plot_execution_time_statistics",
        "kind": 2,
        "importPath": "vizualization",
        "description": "vizualization",
        "peekOfCode": "def plot_execution_time_statistics(results):\n    \"\"\"\n    Function to plot the execution time statistics.\n    Args:\n        results (dict of list of floats): Dict linking instance name to list of execution times starting with the matrix size.\n    \"\"\"\n    size_time_ni, size_time_ns = {}, {}\n    for key, values in results.items():\n        size_time_ni.setdefault(values[0], []).append(values[1])\n        size_time_ns.setdefault(values[0], []).append(values[2])",
        "detail": "vizualization",
        "documentation": {}
    }
]